name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECS_CLUSTER: production-neuralchat-cluster
  ECS_SERVICE_API: production-neuralchat-api-service

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm run bootstrap

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Build packages
        run: |
          npm run build --workspace=@neuralchat/shared
          npm run build --workspace=@neuralchat/ui-kit
          npm run build --workspace=@neuralchat/api
          npm run build --workspace=@neuralchat/web
          npm run build --workspace=@neuralchat/admin

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      api-repo-uri: ${{ steps.deploy-stack.outputs.api-repo-uri }}
      web-repo-uri: ${{ steps.deploy-stack.outputs.web-repo-uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation stack
        id: deploy-stack
        run: |
          aws cloudformation deploy \
            --template-file aws/cloudformation/infrastructure.yml \
            --stack-name production-neuralchat-infrastructure \
            --parameter-overrides \
              Environment=production \
              DomainName=neuralchat.pro \
              CertificateArn=${{ secrets.SSL_CERTIFICATE_ARN }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset

          # Get outputs
          API_REPO_URI=$(aws cloudformation describe-stacks \
            --stack-name production-neuralchat-infrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`APIRepositoryURI`].OutputValue' \
            --output text)
          
          WEB_REPO_URI=$(aws cloudformation describe-stacks \
            --stack-name production-neuralchat-infrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`WebRepositoryURI`].OutputValue' \
            --output text)

          echo "api-repo-uri=$API_REPO_URI" >> $GITHUB_OUTPUT
          echo "web-repo-uri=$WEB_REPO_URI" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: Build and Deploy Applications
    runs-on: ubuntu-latest
    needs: [test, deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install dependencies and build
        run: |
          npm ci --legacy-peer-deps
          npm run bootstrap
          npm run build --workspace=@neuralchat/shared

      - name: Build and push API Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build API
          npm run build --workspace=@neuralchat/api
          
          # Build Docker image
          docker build -t $ECR_REGISTRY/production-neuralchat-api:$IMAGE_TAG -f docker/api.Dockerfile .
          docker build -t $ECR_REGISTRY/production-neuralchat-api:latest -f docker/api.Dockerfile .
          
          # Push to ECR
          docker push $ECR_REGISTRY/production-neuralchat-api:$IMAGE_TAG
          docker push $ECR_REGISTRY/production-neuralchat-api:latest

      - name: Deploy to ECS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update ECS service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_API \
            --force-new-deployment

          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_API

  deploy-frontend:
    name: Deploy Frontend Applications
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        app: [web, admin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies and build
        run: |
          npm ci --legacy-peer-deps
          npm run bootstrap
          npm run build --workspace=@neuralchat/shared
          npm run build --workspace=@neuralchat/ui-kit

      - name: Build application
        run: |
          if [ "${{ matrix.app }}" = "web" ]; then
            npm run build --workspace=@neuralchat/web
          else
            npm run build --workspace=@neuralchat/admin
          fi

      - name: Deploy to Amplify
        run: |
          if [ "${{ matrix.app }}" = "web" ]; then
            APP_ID="${{ secrets.AMPLIFY_APP_ID_WEB }}"
          else
            APP_ID="${{ secrets.AMPLIFY_APP_ID_ADMIN }}"
          fi
          
          aws amplify start-job \
            --app-id $APP_ID \
            --branch-name main \
            --job-type RELEASE

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-deploy, deploy-frontend]
    if: always()
    steps:
      - name: Notify success
        if: needs.build-and-deploy.result == 'success' && needs.deploy-frontend.result == 'success'
        run: |
          echo "üéâ Deployment to production completed successfully!"
          # Add Slack/Discord notification here if needed

      - name: Notify failure
        if: needs.build-and-deploy.result == 'failure' || needs.deploy-frontend.result == 'failure'
        run: |
          echo "‚ùå Deployment to production failed!"
          # Add Slack/Discord notification here if needed 