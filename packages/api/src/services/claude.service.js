const Anthropic = require('@anthropic-ai/sdk');
const logger = require('../utils/logger');

class ClaudeService {
  constructor() {
    this.client = new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY
    });
    
    this.models = {
      'claude-4-opus': 'claude-3-opus-20240229',            // –°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å
      'claude-4-sonnet': 'claude-3-opus-20240229',          // –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º Opus)
      'claude-3.7-sonnet': 'claude-3-haiku-20240307',       // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º Haiku)
      'claude-3-haiku-20240307': 'claude-3-haiku-20240307', // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      'claude-3-opus-20240229': 'claude-3-opus-20240229'    // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    };
  }

  async createMessage(messages, options = {}) {
    try {
      const {
        model = 'claude-4-sonnet',
        maxTokens = 4096,
        temperature = 0.7,
        systemPrompt = null,
        stream = false
      } = options;

      const modelId = this.models[model] || model;

      const params = {
        model: modelId,
        messages: this.formatMessages(messages),
        max_tokens: maxTokens,
        temperature,
        stream
      };

      if (systemPrompt) {
        params.system = systemPrompt;
      }

      if (stream) {
        return await this.client.messages.create(params);
      }

      const response = await this.client.messages.create(params);
      
      const fullText = response.content[0].text;
      const artifacts = this.extractArtifacts(fullText);
      const cleanContent = this.removeArtifactsFromText(fullText, artifacts);
      
      return {
        content: cleanContent,
        usage: {
          promptTokens: response.usage.input_tokens,
          completionTokens: response.usage.output_tokens,
          totalTokens: response.usage.input_tokens + response.usage.output_tokens
        },
        model: modelId,
        artifacts: artifacts
      };
    } catch (error) {
      logger.error('Claude API error:', error);
      
      if (error.status === 429) {
        throw new Error('Rate limit exceeded. Please try again later.');
      }
      
      if (error.status === 401) {
        throw new Error('Invalid API key');
      }
      
      throw new Error(`Claude API error: ${error.message}`);
    }
  }

  async createStreamingMessage(messages, options = {}) {
    try {
      const stream = await this.createMessage(messages, { ...options, stream: true });
      return stream;
    } catch (error) {
      logger.error('Claude streaming error:', error);
      throw error;
    }
  }

  formatMessages(messages) {
    return messages.map(msg => {
      const formatted = {
        role: msg.role === 'assistant' ? 'assistant' : 'user',
        content: []
      };

      // Add text content
      if (msg.content) {
        formatted.content.push({
          type: 'text',
          text: msg.content
        });
      }

      // Add attachments
      if (msg.attachments && msg.attachments.length > 0) {
        console.log('üîç Claude processing attachments:', {
          count: msg.attachments.length,
          attachments: msg.attachments.map(att => ({
            name: att.name,
            type: att.type || att.mimeType,
            size: att.size,
            hasData: !!att.data
          }))
        });
        
        for (const attachment of msg.attachments) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ mimeType
          const isImage = attachment.mimeType && attachment.mimeType.startsWith('image/');
          
          if (isImage && attachment.data) {
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image/...;base64, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            const base64Data = attachment.data.includes(',') 
              ? attachment.data.split(',')[1] 
              : attachment.data;
              
            formatted.content.push({
              type: 'image',
              source: {
                type: 'base64',
                media_type: attachment.mimeType,
                data: base64Data
              }
            });
          } else if (attachment.type === 'text' || attachment.mimeType?.startsWith('text/')) {
            // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç
            let content = attachment.content || '';
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å data (base64), –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
            if (!content && attachment.data) {
              try {
                if (attachment.data.includes(',')) {
                  // data:text/plain;base64,xxxxx
                  const base64Data = attachment.data.split(',')[1];
                  content = Buffer.from(base64Data, 'base64').toString('utf-8');
                } else {
                  content = Buffer.from(attachment.data, 'base64').toString('utf-8');
                }
              } catch (e) {
                console.error('Failed to decode text file:', e);
                content = '[–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞]';
              }
            }
            
            formatted.content.push({
              type: 'text',
              text: `üìÑ –§–∞–π–ª: ${attachment.name}\n\`\`\`\n${content || '[–§–∞–π–ª –ø—É—Å—Ç]'}\n\`\`\``
            });
          } else if (attachment.mimeType?.includes('json') || attachment.mimeType?.includes('xml') || 
                     attachment.mimeType?.includes('yaml') || attachment.mimeType?.includes('markdown')) {
            // –î–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            let content = '';
            
            if (attachment.data) {
              try {
                const base64Data = attachment.data.includes(',') 
                  ? attachment.data.split(',')[1] 
                  : attachment.data;
                content = Buffer.from(base64Data, 'base64').toString('utf-8');
              } catch (e) {
                console.error('Failed to decode file:', e);
              }
            }
            
            formatted.content.push({
              type: 'text',
              text: `üìÑ –§–∞–π–ª: ${attachment.name} (${attachment.mimeType})\n\`\`\`\n${content || '[–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª]'}\n\`\`\``
            });
          } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            formatted.content.push({
              type: 'text',
              text: `–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: ${attachment.name} (${attachment.mimeType || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'}, ${attachment.size ? Math.round(attachment.size / 1024) + ' KB' : '—Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})`
            });
          }
        }
      }

      return formatted;
    });
  }

  extractArtifacts(content) {
    const artifacts = [];
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ Claude - –∏—â–µ–º —Ç–µ–≥–∏ <artifact>
    const artifactRegex = /<artifact([^>]*?)>([\s\S]*?)<\/artifact>/g;
    let match;
    
    while ((match = artifactRegex.exec(content)) !== null) {
      const attributeString = match[1];
      const artifactContent = match[2];
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
      const attributes = this.extractArtifactAttributes(attributeString);
      
      if (attributes.identifier) {
        artifacts.push({
          id: attributes.identifier,
          type: this.mapArtifactType(attributes.type),
          title: attributes.title || '',
          language: attributes.language || this.detectLanguage(artifactContent, attributes.type),
          content: artifactContent.trim()
        });
      }
    }
    
    // –¢–∞–∫–∂–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ã—á–Ω—ã–µ code blocks –∫–∞–∫ fallback
    if (artifacts.length === 0) {
      const codeBlockRegex = /```(\w+)?\n([\s\S]*?)```/g;
      
      while ((match = codeBlockRegex.exec(content)) !== null) {
        artifacts.push({
          id: `artifact_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          type: 'code',
          language: match[1] || 'plain',
          content: match[2].trim(),
          title: `Code (${match[1] || 'plain'})`
        });
      }
    }

    return artifacts;
  }

  removeArtifactsFromText(content, artifacts) {
    let cleanContent = content;
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <artifact>...</artifact> –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const artifactRegex = /<artifact([^>]*?)>([\s\S]*?)<\/artifact>/g;
    cleanContent = cleanContent.replace(artifactRegex, '');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleanContent = cleanContent.replace(/\n\s*\n\s*\n/g, '\n\n').trim();
    
    return cleanContent;
  }

  extractArtifactAttributes(attributeString) {
    const attributes = {};
    
    const patterns = {
      identifier: /identifier\s*=\s*["']([^"']+)["']/,
      type: /type\s*=\s*["']([^"']+)["']/,
      title: /title\s*=\s*["']([^"']+)["']/,
      language: /language\s*=\s*["']([^"']+)["']/
    };
    
    for (const [key, pattern] of Object.entries(patterns)) {
      const match = attributeString.match(pattern);
      if (match) {
        attributes[key] = match[1];
      }
    }
    
    return attributes;
  }

  mapArtifactType(type) {
    const typeMapping = {
      'application/vnd.ant.code': 'code',
      'text/markdown': 'markdown',
      'application/vnd.ant.react': 'react',
      'image/svg+xml': 'svg',
      'text/html': 'html',
      'text/mermaid': 'mermaid'
    };
    
    return typeMapping[type] || 'code';
  }

  detectLanguage(content, type) {
    if (!content || typeof content !== 'string') return 'text';
    
    const contentLower = content.toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    if (type === 'application/vnd.ant.react') return 'jsx';
    if (type === 'image/svg+xml') return 'xml';
    if (type === 'text/html') return 'html';
    if (type === 'text/markdown') return 'markdown';
    
    // JavaScript/TypeScript
    if (contentLower.includes('import ') || 
        contentLower.includes('export ') || 
        contentLower.includes('function ') ||
        contentLower.includes('const ') ||
        contentLower.includes('let ') ||
        contentLower.includes('var ')) {
      if (contentLower.includes('interface ') || 
          contentLower.includes(': string') ||
          contentLower.includes(': number')) {
        return 'typescript';
      }
      return 'javascript';
    }
    
    // Python
    if (contentLower.includes('def ') || 
        contentLower.includes('import ') ||
        contentLower.includes('from ') ||
        contentLower.includes('class ') ||
        contentLower.includes('print(')) {
      return 'python';
    }
    
    // HTML
    if (contentLower.includes('<!doctype') || 
        contentLower.includes('<html') ||
        contentLower.includes('<div') ||
        contentLower.includes('<body')) {
      return 'html';
    }
    
    // CSS
    if (contentLower.includes('{') && contentLower.includes('}') && 
        (contentLower.includes('color:') || 
         contentLower.includes('margin:') || 
         contentLower.includes('padding:'))) {
      return 'css';
    }
    
    // JSON
    const trimmed = content.trim();
    if ((trimmed.startsWith('{') && trimmed.endsWith('}')) ||
        (trimmed.startsWith('[') && trimmed.endsWith(']'))) {
      try {
        JSON.parse(content);
        return 'json';
      } catch (e) {
        // –ù–µ JSON
      }
    }
    
    // SQL
    if (contentLower.includes('select ') ||
        contentLower.includes('create ') ||
        contentLower.includes('insert ') ||
        contentLower.includes('update ')) {
      return 'sql';
    }
    
    return 'text';
  }

  calculateCost(usage, model) {
    const pricing = {
      'claude-4-opus': { input: 0.015, output: 0.075 },         // –ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—å (Claude 3 Opus)
      'claude-4-sonnet': { input: 0.015, output: 0.075 },       // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å (Claude 3 Opus)
      'claude-3.7-sonnet': { input: 0.00025, output: 0.00125 }, // –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å (Claude 3 Haiku)
      'claude-3-haiku-20240307': { input: 0.00025, output: 0.00125 },
      'claude-3-opus-20240229': { input: 0.015, output: 0.075 }
    };

    const modelPricing = pricing[model] || pricing['claude-4-sonnet'];
    
    const inputCost = (usage.promptTokens / 1000) * modelPricing.input;
    const outputCost = (usage.completionTokens / 1000) * modelPricing.output;
    
    return inputCost + outputCost;
  }

  async validateApiKey(apiKey) {
    try {
      const client = new Anthropic({ apiKey });
      
      // Try a minimal request
      await client.messages.create({
        model: 'claude-3-opus-20240229',
        messages: [{ role: 'user', content: 'Hi' }],
        max_tokens: 10
      });
      
      return true;
    } catch (error) {
      return false;
    }
  }
}

module.exports = new ClaudeService();