const mongoose = require('mongoose');
const User = require('../models/user.model');

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –∫ lowercase
 */
async function fixSubscriptionPlans() {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏...');

    // –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–ª–∞–Ω–∞–º–∏ –Ω–µ –≤ lowercase
    const users = await User.find({
      'subscription.plan': { $in: ['Free', 'Pro', 'Business', 'FREE', 'PRO', 'BUSINESS'] }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏`);

    let fixed = 0;
    for (const user of users) {
      const oldPlan = user.subscription.plan;
      const newPlan = oldPlan.toLowerCase();
      
      if (oldPlan !== newPlan) {
        user.subscription.plan = newPlan;
        await user.save();
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email}: ${oldPlan} ‚Üí ${newPlan}`);
        fixed++;
      }
    }

    console.log(`üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixed} –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏`);
    return { success: true, fixed };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function checkSubscriptionPlans() {
  try {
    const stats = await User.aggregate([
      {
        $group: {
          _id: '$subscription.plan',
          count: { $sum: 1 }
        }
      },
      {
        $sort: { count: -1 }
      }
    ]);

    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏:');
    stats.forEach(stat => {
      console.log(`  ${stat._id || 'undefined'}: ${stat.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    });

    return stats;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞–Ω–æ–≤:', error);
    return [];
  }
}

module.exports = {
  fixSubscriptionPlans,
  checkSubscriptionPlans
}; 